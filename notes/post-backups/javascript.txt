Title: Javascript Array methods
Subtitle: In a Nutshell
Content:
Arrays are high-level list-like objects that must use integers as indexes. There are about 30 array methods, or traversal/mutation operations. Some methods take the length of the array into account, e.g. join(), slice() and indexOf(). Some methods modify the length of the array, e.g. push(), splice() and pop().

The most common array methods used are:
forEach() - to loop through each item in an array,
includes() - to see if an array includes an item, 
filter() - creates a new array with only items that pass a filter function,
find() - stops looking once it finds an array item that passes a test,
join() - concatenates all array elements, using a specified separator,
findIndex() - same as find() but returns the index of the first item found.
map() - creates a new array with all elements passing through a function,
reduce - returns a single value from a function and accumulator,
some() - boolean output to say if one or more items meets a condition,
every() - boolean output to say if all items pass a condition,
slice() - takes a shallow copy of a portion of an array. This method has been replaced by filter(),
sort() - sorts items in ascending or descending order,
fill() - fills all array positions with a specified value,
pop() - removes last element from an array and returns it,
shift() - removes first element of an array and returns it,
push() - add an item to an array
isArray() - boolean output to say if it is an array or not.
array.from() changes array-like/iterable items into a new true array so array methods can be used. Compared to the spread operator that only works on iterables and allows an array to be expanded,
spread operator: replaces unshift().
array.of() creates an array from arguments passed into it.

Future methods:
flat() - returns a new array with all sub-array items flattened to s specified depth
flatMap()  - uses a mapping function on each element and flattens the array by 1 level.

Specification: ECMAScript 2016: added array.includes() method.

Fun-fact: integers are coerced into strings by the javascript engine using an implicit toString operation.  